from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
import threading
import gspread
import xml.etree.ElementTree as ET
import json
import time
import requests
import asyncio
import re
from datetime import datetime
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request as GoogleRequest
import random
import hashlib
import urllib.parse
from datetime import datetime

# üîπ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
MASTER_SHEET_ID = "1z16Xcj_58R2Z-JGOMuyx4GpVdQqDn1UtQirCxOrE_hc"
XML_DIR = "/output"
LOG_DIR = "/logs"
DEBUG_LOG_FILE = os.path.join(LOG_DIR, "debug_log.html")  # –§–∞–π–ª, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è!
UPDATE_INTERVAL = 1800  # 30 —Ö–≤–∏–ª–∏–Ω
price_hash_cache = {}

# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
for dir_path in [XML_DIR, os.path.dirname(DEBUG_LOG_FILE)]:
    os.makedirs(dir_path, exist_ok=True)




def get_log_filename():
    """ –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –ª–æ–≥-—Ñ–∞–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É –∑–∞–ø—É—Å–∫—É """
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    return os.path.join(LOG_DIR, f"log_{timestamp}.html")

def log_to_file(content, log_filename):
    """ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {content}\n"

    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(log_entry)

# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
TOKEN_JSON = os.getenv("TOKEN_JSON")
if not GOOGLE_CREDENTIALS or not TOKEN_JSON:
    raise ValueError("‚ùå GOOGLE_CREDENTIALS –∞–±–æ TOKEN_JSON –≤—ñ–¥—Å—É—Ç–Ω—ñ!")

TOKEN_FILE = json.loads(TOKEN_JSON)
CREDENTIALS_FILE = json.loads(GOOGLE_CREDENTIALS)

def get_google_client():
    """ –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ Google Sheets """
    log_filename = get_log_filename()  # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥-—Ñ–∞–π–ª
    creds = Credentials.from_authorized_user_info(TOKEN_FILE)

    if not creds or not creds.valid:
        if creds.expired and creds.refresh_token:
            creds.refresh(GoogleRequest(requests.Session()))
            log_to_file("üîÑ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ", log_filename)  # –ü–µ—Ä–µ–¥–∞—î–º–æ log_filename
        else:
            flow = InstalledAppFlow.from_client_config(
                CREDENTIALS_FILE, ["https://www.googleapis.com/auth/spreadsheets"]
            )
            creds = flow.run_local_server(port=8080)

    return gspread.authorize(creds)

client = get_google_client()
spreadsheet = client.open_by_key(MASTER_SHEET_ID)

# üîπ –§—É–Ω–∫—Ü—ñ—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
def safe_get_value(row, column_letter, default_value="-"):
    """
    –û—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –∫–æ–ª–æ–Ω–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 'A', 'B', 'C'...
    - –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö —Ä—è–¥–∫–∞
    - –í–∏–¥–∞–ª—è—î –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    - –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫
    """
    try:
        if column_letter and column_letter.isalpha():
            col_index = ord(column_letter.upper()) - 65  # A -> 0, B -> 1, C -> 2 ...
            if len(row) > col_index:
                value = str(row[col_index]).strip()
                return value if value else default_value
    except Exception as e:
        log_to_file(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ({column_letter}): {e}")

    return default_value

## üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω–∏
def clean_price(value):
    """
    –û—á–∏—â–∞—î —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏:
    - –í–∏–¥–∞–ª—è—î –≤—Å—ñ –Ω–µ—á–∏—Å–ª–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏, –∫—Ä—ñ–º –∫–æ–º–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏
    - –Ø–∫—â–æ —î –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫, –∑–±–µ—Ä—ñ–≥–∞—î –ª–∏—à–µ —Ü—ñ–ª—É —á–∞—Å—Ç–∏–Ω—É
    - –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞
    """
    try:
        if not value:
            return "0"

        value = re.sub(r"[^\d,\.]", "", value)

        # –Ø–∫—â–æ —î –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫, –∑–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ —Ü—ñ–ª—É —á–∞—Å—Ç–∏–Ω—É
        if "," in value:
            value = value.split(",")[0]
        elif "." in value:
            value = value.split(".")[0]

        return value if value else "0"

    except Exception as e:
        log_to_file(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ü—ñ–Ω–∏: {value} - {e}")
        return "0"


# üîπ –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó XML
# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è XML

def create_xml(supplier_id, supplier_name, sheet_id, columns, log_filename):
    """ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –ª–æ–≥-—Ñ–∞–π–ª–æ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É """
    xml_file = os.path.join(XML_DIR, f"{supplier_id}.xml")
    log_to_file(f"üì• –û–±—Ä–æ–±–∫–∞: {supplier_name} ({sheet_id})", log_filename)

    retry_count = 0
    max_retries = 5  

    while retry_count < max_retries:
        try:
            spreadsheet = client.open_by_key(sheet_id)
            sheets = spreadsheet.worksheets()
            combined_data = []

            for sheet in sheets:
                data = sheet.get_all_values()
                if len(data) < 2:
                    log_to_file(f"‚ö†Ô∏è –ê—Ä–∫—É—à {sheet.title} –ø–æ—Ä–æ–∂–Ω—ñ–π", log_filename)
                    continue
                combined_data.extend(data[1:])  

            if not combined_data:
                log_to_file(f"‚ö†Ô∏è {supplier_name} –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö", log_filename)
                return

            root = ET.Element("products")
            processed_count = 0
            skipped_count = 0

            for row in combined_data:
                product_id = safe_get_value(row, columns.get("ID"))
                name = safe_get_value(row, columns.get("Name"))
                stock = safe_get_value(row, columns.get("Stock"), "true")
                price = clean_price(safe_get_value(row, columns.get("Price"), "0"))

                if not product_id or not name or not price:
                    log_to_file(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–æ–∫: {row}, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ ID, Name –∞–±–æ Price", log_filename)
                    skipped_count += 1
                    continue

                log_to_file(f"‚úÖ –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä: id='{product_id}', name='{name}', price='{price}', stock='{stock}'", log_filename)

                product = ET.SubElement(root, "product")
                ET.SubElement(product, "id").text = product_id
                ET.SubElement(product, "name").text = name
                ET.SubElement(product, "stock").text = stock
                ET.SubElement(product, "price").text = price

                processed_count += 1

            ET.ElementTree(root).write(xml_file, encoding="utf-8", xml_declaration=True)
            log_to_file(f"‚úÖ XML {xml_file} –∑–±–µ—Ä–µ–∂–µ–Ω–æ ({processed_count} —Ç–æ–≤–∞—Ä—ñ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count})", log_filename)

            return

        except gspread.exceptions.APIError as e:
            log_to_file(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ {supplier_name}: {e}", log_filename)
            return


def get_price_hash(sheet, log_filename):
    """
    –ì–µ–Ω–µ—Ä—É—î —Ö–µ—à –¥–ª—è –¥–∞–Ω–∏—Ö –∑ Google Sheets, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –≤–æ–Ω–∏.
    """
    try:
        data = sheet.get_all_values()
        data_str = json.dumps(data, sort_keys=True)  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ JSON
        return hashlib.md5(data_str.encode()).hexdigest()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ MD5-—Ö–µ—à
    except Exception as e:
        log_to_file(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ö–µ—à—É –¥–ª—è {sheet.title}: {e}", log_filename)
        return None

async def periodic_update():
    """
    –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å, —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ —Ç—ñ XML-—Ñ–∞–π–ª–∏, —è–∫—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è.
    –õ–æ–≥-—Ñ–∞–π–ª —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –æ–¥–∏–Ω –Ω–∞ –≤–µ—Å—å —Ü–∏–∫–ª.
    """
    while True:
        log_filename = get_log_filename()  # –û–¥–∏–Ω –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –≤—Å—å–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        log_to_file("üîÑ [Auto-Update] –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–º—ñ–Ω —É Google Sheets...", log_filename)

        try:
            supplier_data = spreadsheet.worksheet("Sheet1").get_all_records()
        except gspread.exceptions.APIError as e:
            log_to_file(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ: {e}", log_filename)
            await asyncio.sleep(UPDATE_INTERVAL)
            continue

        updated_suppliers = []
        skipped_suppliers = []
        batch_size = 5  

        for i in range(0, len(supplier_data), batch_size):
            batch = supplier_data[i:i + batch_size]

            for supplier in batch:
                supplier_id = str(supplier["Post_ID"])
                supplier_name = supplier["Supplier Name"]
                sheet_id = supplier["Google Sheet ID"]

                if supplier_id in skipped_suppliers:
                    log_to_file(f"‚ö†Ô∏è {supplier_name}: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ API-–ª—ñ–º—ñ—Ç.", log_filename)
                    continue

                columns = {
                    "ID": supplier["ID Column"] if supplier["ID Column"] != "-" else None,
                    "Name": supplier["Name Column"] if supplier["Name Column"] != "-" else None,
                    "Stock": supplier["Stock Column"] if supplier["Stock Column"] != "-" else None,
                    "Price": supplier["Price Column"] if supplier["Price Column"] != "-" else None,
                    "SKU": supplier["SKU Column"] if supplier["SKU Column"] != "-" else None,
                    "RRP": supplier["RRP Column"] if supplier["RRP Column"] != "-" else None,
                    "Currency": supplier["Currency Column"] if supplier["Currency Column"] != "-" else None
                }

                retry_count = 0
                max_retries = 5  

                while retry_count < max_retries:
                    try:
                        sheet = client.open_by_key(sheet_id).sheet1
                        await asyncio.sleep(random.uniform(2, 5))  

                        new_hash = get_price_hash(sheet, log_filename)  # –ü–µ—Ä–µ–¥–∞—î–º–æ log_filename

                        if supplier_id in price_hash_cache and price_hash_cache[supplier_id] == new_hash:
                            log_to_file(f"‚è≠Ô∏è {supplier_name}: –ù–µ–º–∞—î –∑–º—ñ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...", log_filename)
                            break  

                        price_hash_cache[supplier_id] = new_hash  

                        create_xml(supplier_id, supplier_name, sheet_id, columns, log_filename)

                        updated_suppliers.append(supplier_name)
                        break  

                    except gspread.exceptions.APIError as e:
                        if "429" in str(e):
                            retry_count += 1
                            wait_time = retry_count * 20
                            log_to_file(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è {supplier_name}. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ {retry_count}/{max_retries} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫.", log_filename)
                            await asyncio.sleep(wait_time)  
                        else:
                            log_to_file(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {supplier_name}: {e}", log_filename)
                            break  

                if retry_count == max_retries:
                    log_to_file(f"‚ùå {supplier_name}: –í—Å—ñ {max_retries} —Å–ø—Ä–æ–±–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è.", log_filename)
                    skipped_suppliers.append(supplier_id)

        log_to_file(f"‚úÖ [Auto-Update] –û–Ω–æ–≤–ª–µ–Ω–æ {len(updated_suppliers)} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤, —á–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª...", log_filename)
        await asyncio.sleep(UPDATE_INTERVAL)




# üîπ API
app = FastAPI()
templates = Jinja2Templates(directory="/app/templates")

@app.get("/output/", response_class=HTMLResponse)
def list_output_files(request: Request):
    """
    –ì–µ–Ω–µ—Ä—É—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ /output/
    """
    try:
        files = os.listdir(XML_DIR)
        files = sorted(files)  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
    except FileNotFoundError:
        files = []
    return templates.TemplateResponse("file_list.html", {"request": request, "files": files})

app.mount("/output/", StaticFiles(directory=os.path.abspath(XML_DIR)), name="output")  
 

@app.get("/XML_prices/google_sheet_to_xml/files")
def list_files():
    return {"files": [f for f in os.listdir(XML_DIR) if f.endswith(".xml")]}

@app.get("/XML_prices/google_sheet_to_xml/download/{filename}")
def download_file(filename: str):
    file_path = os.path.join(XML_DIR, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path, filename=filename)
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@app.delete("/XML_prices/google_sheet_to_xml/delete/{filename}")
def delete_file(filename: str):
    file_path = os.path.join(XML_DIR, filename)
    if os.path.exists(file_path):
        os.remove(file_path)
        return {"status": "success", "message": f"–§–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ."}
    raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@app.delete("/XML_prices/google_sheet_to_xml/delete_all")
def delete_all_files():
    files = os.listdir(XML_DIR)
    for file in files:
        os.remove(os.path.join(XML_DIR, file))
    return {"status": "success", "message": "–í—Å—ñ —Ñ–∞–π–ª–∏ —É –ø–∞–ø—Ü—ñ output –≤–∏–¥–∞–ª–µ–Ω–æ."}

#@app.get("/logs/debug", response_class=HTMLResponse)
#def view_debug_log():
#    if os.path.exists(DEBUG_LOG_FILE):
#        return FileResponse(DEBUG_LOG_FILE)
#    raise HTTPException(status_code=404, detail="–§–∞–π–ª –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")



@app.on_event("startup")
async def startup_event():
    asyncio.ensure_future(periodic_update())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è XML


# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è –ª–æ–≥—ñ–≤
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(os.path.join(LOG_DIR, "debug_logs"), exist_ok=True)  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–∞–ø–æ–∫

@app.get("/logs/", response_class=HTMLResponse)
def list_logs(request: Request):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ HTML-—Ç–∞–±–ª–∏—Ü—ñ
    """
    try:
        log_files = [
            {"name": f, "size": os.path.getsize(os.path.join(LOG_DIR, f))}
            for f in sorted(os.listdir(LOG_DIR), reverse=True) if f.startswith("log_") and f.endswith(".html")
        ]
    except FileNotFoundError:
        log_files = []

    return templates.TemplateResponse("log_list.html", {"request": request, "logs": log_files})


app.mount("/logs/", StaticFiles(directory=os.path.abspath(LOG_DIR)), name="logs")


@app.get("/logs/{filename}", response_class=HTMLResponse)
def view_log(request: Request, filename: str):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–º—ñ—Å—Ç –ª–æ–≥-—Ñ–∞–π–ª—É —É –±—Ä–∞—É–∑–µ—Ä—ñ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω
    """
    safe_filename = urllib.parse.unquote(filename)
    file_path = os.path.join(LOG_DIR, safe_filename)

    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    with open(file_path, "r", encoding="utf-8") as file:
        log_content = file.read()

    return templates.TemplateResponse("log_view.html", {
        "request": request,
        "filename": safe_filename,
        "log_content": log_content
    })


app.mount("/logs/", StaticFiles(directory=os.path.abspath(LOG_DIR)), name="logs")



@app.post("/XML_prices/google_sheet_to_xml/generate")
def generate():
    log_filename = get_log_filename()
    log_to_file("üöÄ [Manual Start] –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML –≤—Ä—É—á–Ω—É —Ä–æ–∑–ø–æ—á–∞—Ç–∞", log_filename)

    threading.Thread(target=lambda: [
        create_xml(str(supplier["Post_ID"]), supplier["Supplier Name"], supplier["Google Sheet ID"], 
                   {"ID": "A", "Name": "B", "Price": "D"}, log_filename)
        for supplier in spreadsheet.worksheet("Sheet1").get_all_records()
    ]).start()

    return {"status": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML –∑–∞–ø—É—â–µ–Ω–∞"}