from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import os
import threading
import gspread
import xml.etree.ElementTree as ET
import json
import time
import re
import requests
import hashlib
import asyncio
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from fastapi.templating import Jinja2Templates
from fastapi.requests import Request
from fastapi.responses import HTMLResponse
from fastapi import Depends
from google.auth.transport.requests import Request as GoogleRequest

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
MASTER_SHEET_ID = "1z16Xcj_58R2Z-JGOMuyx4GpVdQqDn1UtQirCxOrE_hc"
XML_DIR = "/output"
UPDATE_INTERVAL = 1800  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω (1800 —Å–µ–∫—É–Ω–¥)
price_hash_cache = {}  # –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ö–µ—à—ñ–≤ —Ñ–∞–π–ª—ñ–≤


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞
if not os.path.exists(XML_DIR):
    os.makedirs(XML_DIR)
    print(f"üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è XML: {XML_DIR}")

GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
TOKEN_JSON = os.getenv("TOKEN_JSON")

if not GOOGLE_CREDENTIALS or not TOKEN_JSON:
    raise ValueError("‚ùå –ü–æ–º–∏–ª–∫–∞! –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GOOGLE_CREDENTIALS –∞–±–æ TOKEN_JSON –≤—ñ–¥—Å—É—Ç–Ω—ñ!")

try:
    TOKEN_FILE = json.loads(TOKEN_JSON)
    CREDENTIALS_FILE = json.loads(GOOGLE_CREDENTIALS)
except json.JSONDecodeError as e:
    raise ValueError(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")

app = FastAPI(
    title="Google Sheets to XML API",
    description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è XML-—Ñ–∞–π–ª—ñ–≤ –∑ Google Sheets",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤
templates = Jinja2Templates(directory="/app/templates")

@app.get("/output/", response_class=HTMLResponse)
def list_output_files(request: Request):
    """
    –ì–µ–Ω–µ—Ä—É—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ /output/
    """
    try:
        files = os.listdir(XML_DIR)
        files = sorted(files)  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
    except FileNotFoundError:
        files = []

    return templates.TemplateResponse("file_list.html", {"request": request, "files": files})


app.mount("/output", StaticFiles(directory=XML_DIR, html=True), name="output")


process_status = {"running": False, "last_update": "", "files_created": 0}

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ Google Sheets
def get_google_client():
    creds = None

    if TOKEN_FILE:
        creds = Credentials.from_authorized_user_info(TOKEN_FILE)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            session = requests.Session()
            creds.refresh(GoogleRequest(session))
            print("üîÑ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            flow = InstalledAppFlow.from_client_config(
                CREDENTIALS_FILE,
                ["https://www.googleapis.com/auth/spreadsheets"]
            )
            creds = flow.run_local_server(port=8080)
            print("‚úÖ –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ")

    return gspread.authorize(creds)

client = get_google_client()
spreadsheet = client.open_by_key(MASTER_SHEET_ID)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–µ—à—É —Ç–∞–±–ª–∏—Ü—ñ
def get_price_hash(sheet):
    try:
        data = sheet.get_all_values()
        data_str = json.dumps(data, ensure_ascii=False)
        return hashlib.md5(data_str.encode()).hexdigest()
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        return None

# –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó XML
def create_xml(supplier_id, supplier_name, sheet_id, columns):
    xml_file = os.path.join(XML_DIR, f"{supplier_id}.xml")

    print(f"üì• –û–±—Ä–æ–±–∫–∞: {supplier_name} ({sheet_id})")

    try:
        spreadsheet = client.open_by_key(sheet_id)
        sheets = spreadsheet.worksheets()
        combined_data = []

        for sheet in sheets:
            data = sheet.get_all_values()
            if len(data) < 2:
                continue
            combined_data.extend(data[1:])

        if not combined_data:
            print(f"‚ö†Ô∏è –£ {supplier_name} –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö! –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ XML.")
            return

        root = ET.Element("products")
        for row in combined_data:
            product_id = row[0] if len(row) > 0 else "-"
            name = row[1] if len(row) > 1 else "-"
            stock = row[2] if len(row) > 2 else "true"
            price = row[3] if len(row) > 3 else "0"
            sku = row[4] if len(row) > 4 else "-"
            currency = row[5] if len(row) > 5 else "UAH"

            if not name or price == "0":
                continue

            product = ET.SubElement(root, "product")
            ET.SubElement(product, "id").text = product_id
            ET.SubElement(product, "name").text = name
            ET.SubElement(product, "stock").text = stock
            ET.SubElement(product, "price").text = price
            ET.SubElement(product, "currency").text = currency
            if sku:
                ET.SubElement(product, "sku").text = sku

        tree = ET.ElementTree(root)
        tree.write(xml_file, encoding="utf-8", xml_declaration=True)
        print(f"‚úÖ XML {xml_file} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

    except gspread.exceptions.APIError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ {supplier_name} ({sheet_id}): {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è XML
async def periodic_update():
    """
    –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å, —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ —Ç—ñ XML-—Ñ–∞–π–ª–∏, —è–∫—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è,
    –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–µ—à—É —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–ø–∏—Ç–∏.
    """
    while True:
        print("üîÑ [Auto-Update] –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–º—ñ–Ω —É Google Sheets...")

        supplier_data = spreadsheet.worksheet("Sheet1").get_all_records()
        updated_suppliers = []
        skipped_suppliers = []

        batch_size = 5  # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ 5 –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª

        for i in range(0, len(supplier_data), batch_size):
            batch = supplier_data[i:i + batch_size]

            for supplier in batch:
                supplier_id = str(supplier["Post_ID"])
                supplier_name = supplier["Supplier Name"]
                sheet_id = supplier["Google Sheet ID"]

                if supplier_id in skipped_suppliers:
                    print(f"‚ö†Ô∏è {supplier_name}: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, –±–æ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ü–∏–∫–ª—ñ –±—É–ª–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç API.")
                    continue

                try:
                    sheet = client.open_by_key(sheet_id).sheet1
                    time.sleep(5)  # –ó–±—ñ–ª—å—à—É—î–º–æ –ø–∞—É–∑—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

                    new_hash = get_price_hash(sheet)

                    if supplier_id in price_hash_cache and price_hash_cache[supplier_id] == new_hash:
                        print(f"‚úÖ {supplier_name}: –î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è, XML –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ")
                    else:
                        print(f"üîÑ {supplier_name}: –î–∞–Ω—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ XML")
                        price_hash_cache[supplier_id] = new_hash
                        create_xml(supplier_id, supplier_name, sheet_id, supplier)
                        updated_suppliers.append(supplier_name)

                except gspread.exceptions.APIError as e:
                    if "429" in str(e):
                        print(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è {supplier_name}. –ß–µ–∫–∞—î–º–æ 60 —Å–µ–∫...")
                        time.sleep(60)  # –ß–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                        skipped_suppliers.append(supplier_id)  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                    else:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {supplier_name}: {e}")

            print("‚è≥ –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –≥—Ä—É–ø–æ—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤...")
            await asyncio.sleep(10)  # –†–æ–±–∏–º–æ –ø–∞—É–∑—É –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏

        print("‚úÖ [Auto-Update] –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —á–µ–∫–∞—î–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª...")
        await asyncio.sleep(UPDATE_INTERVAL)  # –ß–µ–∫–∞—î–º–æ 30 —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è


@app.on_event("startup")
async def startup_event():
    asyncio.create_task(periodic_update())

@app.post("/XML_prices/google_sheet_to_xml/generate")
@app.post("/XML_prices/google_sheet_to_xml/generate")
def generate():
    """
    –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó XML-—Ñ–∞–π–ª—ñ–≤. –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É Google API.
    """
    def process_generation():
        global process_status
        print("üîÑ [Manual Update] –ó–∞–ø—É—â–µ–Ω–æ —Ä—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è XML...")

        supplier_data = spreadsheet.worksheet("Sheet1").get_all_records()
        updated_suppliers = []

        for supplier in supplier_data:
            supplier_id = str(supplier["Post_ID"])
            supplier_name = supplier["Supplier Name"]
            sheet_id = supplier["Google Sheet ID"]

            try:
                sheet = client.open_by_key(sheet_id).sheet1
                time.sleep(5)  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—é –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤

                new_hash = get_price_hash(sheet)

                if supplier_id in price_hash_cache and price_hash_cache[supplier_id] == new_hash:
                    print(f"‚úÖ {supplier_name}: –î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è, XML –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ")
                else:
                    print(f"üîÑ {supplier_name}: –î–∞–Ω—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ XML")
                    price_hash_cache[supplier_id] = new_hash
                    create_xml(supplier_id, supplier_name, sheet_id, supplier)
                    updated_suppliers.append(supplier_name)

            except gspread.exceptions.APIError as e:
                if "429" in str(e):
                    print(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è {supplier_name}. –ß–µ–∫–∞—î–º–æ 60 —Å–µ–∫...")
                    time.sleep(60)  # –£–Ω–∏–∫–∞—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API
                    continue
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {supplier_name}: {e}")

        if updated_suppliers:
            print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ XML –¥–ª—è: {', '.join(updated_suppliers)}")
        else:
            print("‚úÖ –ñ–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.")

        print("üîÑ [Manual Update] –†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä
    thread = threading.Thread(target=process_generation)
    thread.start()
    
    return {"status": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML –∑–∞–ø—É—â–µ–Ω–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ"}

@app.get("/XML_prices/google_sheet_to_xml/status")
def status():
    return {"running": process_status["running"], "message": "FastAPI is working!"}



@app.get("/XML_prices/google_sheet_to_xml/files")
def list_files():
    files = [f for f in os.listdir(XML_DIR) if f.endswith(".xml")]
    return {"files": files}


@app.get("/XML_prices/google_sheet_to_xml/download/{filename}")
def download_file(filename: str):
    file_path = os.path.join(XML_DIR, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path, filename=filename)
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@app.delete("/XML_prices/google_sheet_to_xml/delete/{filename}")
def delete_file(filename: str):
    """
    –í–∏–¥–∞–ª—è—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ñ–∞–π–ª —É –ø–∞–ø—Ü—ñ /output/
    """
    file_path = os.path.join(XML_DIR, filename)
    if os.path.exists(file_path):
        os.remove(file_path)
        return {"status": "success", "message": f"–§–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ."}
    else:
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@app.delete("/XML_prices/google_sheet_to_xml/delete_all")
def delete_all_files():
    """
    –í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ñ–∞–π–ª–∏ —É –ø–∞–ø—Ü—ñ /output/
    """
    files = os.listdir(XML_DIR)
    if not files:
        return {"status": "success", "message": "–ü–∞–ø–∫–∞ –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—è."}

    for file in files:
        file_path = os.path.join(XML_DIR, file)
        os.remove(file_path)

    return {"status": "success", "message": "–í—Å—ñ —Ñ–∞–π–ª–∏ —É –ø–∞–ø—Ü—ñ output –≤–∏–¥–∞–ª–µ–Ω–æ."}