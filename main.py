from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
import threading
import gspread
import xml.etree.ElementTree as ET
import json
import time
import requests
import asyncio
import re
from datetime import datetime
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request as GoogleRequest
import random

# üîπ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
MASTER_SHEET_ID = "1z16Xcj_58R2Z-JGOMuyx4GpVdQqDn1UtQirCxOrE_hc"
XML_DIR = "/output"
LOG_DIR = "/app/logs"
DEBUG_LOG_FILE = os.path.join(LOG_DIR, "debug_logs", "debug_log.html")
UPDATE_INTERVAL = 1800  # 30 —Ö–≤–∏–ª–∏–Ω

# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
for dir_path in [XML_DIR, os.path.dirname(DEBUG_LOG_FILE)]:
    os.makedirs(dir_path, exist_ok=True)

# üîπ –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def log_to_file(content):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {content}\n"

    with open(DEBUG_LOG_FILE, "a", encoding="utf-8") as f:
        f.write(log_entry)

    print(log_entry.strip())  # –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å

# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
TOKEN_JSON = os.getenv("TOKEN_JSON")
if not GOOGLE_CREDENTIALS or not TOKEN_JSON:
    raise ValueError("‚ùå GOOGLE_CREDENTIALS –∞–±–æ TOKEN_JSON –≤—ñ–¥—Å—É—Ç–Ω—ñ!")

TOKEN_FILE = json.loads(TOKEN_JSON)
CREDENTIALS_FILE = json.loads(GOOGLE_CREDENTIALS)

def get_google_client():
    creds = Credentials.from_authorized_user_info(TOKEN_FILE)
    if not creds or not creds.valid:
        if creds.expired and creds.refresh_token:
            creds.refresh(GoogleRequest(requests.Session()))
            log_to_file("üîÑ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            flow = InstalledAppFlow.from_client_config(
                CREDENTIALS_FILE, ["https://www.googleapis.com/auth/spreadsheets"]
            )
            creds = flow.run_local_server(port=8080)
    return gspread.authorize(creds)

client = get_google_client()
spreadsheet = client.open_by_key(MASTER_SHEET_ID)

# üîπ –§—É–Ω–∫—Ü—ñ—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
def safe_get_value(row, column_letter, default_value="-"):
    try:
        if column_letter and column_letter.isalpha():
            col_index = ord(column_letter.upper()) - 65  # A -> 0, B -> 1, C -> 2
            if len(row) > col_index:
                value = str(row[col_index]).strip()
                return value if value else default_value
    except Exception as e:
        log_to_file(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ({column_letter}): {e}")

    return default_value

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω–∏
def clean_price(value):
    try:
        if not value:
            return "0"
        value = re.sub(r"[^\d,\.]", "", value)
        if "," in value:
            value = value.split(",")[0]
        elif "." in value:
            value = value.split(".")[0]
        return value if value else "0"
    except Exception as e:
        log_to_file(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ü—ñ–Ω–∏: {value} - {e}")
        return "0"

# üîπ –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó XML
def create_xml(supplier_id, supplier_name, sheet_id, columns):
    xml_file = os.path.join(XML_DIR, f"{supplier_id}.xml")
    log_to_file(f"üì• –û–±—Ä–æ–±–∫–∞: {supplier_name} ({sheet_id})")

    retry_count = 0
    max_retries = 5  # –°–ø—Ä–æ–±–∞ –¥–æ 5 —Ä–∞–∑—ñ–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ 429

    while retry_count < max_retries:
        try:
            spreadsheet = client.open_by_key(sheet_id)
            sheets = spreadsheet.worksheets()
            combined_data = []

            for sheet in sheets:
                data = sheet.get_all_values()
                if len(data) < 2:
                    log_to_file(f"‚ö†Ô∏è –ê—Ä–∫—É—à {sheet.title} –ø–æ—Ä–æ–∂–Ω—ñ–π")
                    continue
                combined_data.extend(data[1:])

            if not combined_data:
                log_to_file(f"‚ö†Ô∏è {supplier_name} –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                return

            root = ET.Element("products")
            for row in combined_data:
                product = ET.SubElement(root, "product")
                ET.SubElement(product, "id").text = safe_get_value(row, columns["ID"], "-")
                ET.SubElement(product, "name").text = safe_get_value(row, columns["Name"], "-")
                ET.SubElement(product, "price").text = clean_price(safe_get_value(row, columns["Price"], "0"))

            ET.ElementTree(root).write(xml_file, encoding="utf-8", xml_declaration=True)
            log_to_file(f"‚úÖ XML {xml_file} –∑–±–µ—Ä–µ–∂–µ–Ω–æ ({len(combined_data)} —Ç–æ–≤–∞—Ä—ñ–≤)")
            time.sleep(random.uniform(1.5, 2.5))
            return

        except gspread.exceptions.APIError as e:
            if "429" in str(e):
                retry_count += 1
                wait_time = retry_count * 20
                log_to_file(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ {retry_count}/{max_retries} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫.")
                time.sleep(wait_time)
            else:
                log_to_file(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ {supplier_name}: {e}")
                return

    log_to_file(f"‚ùå –í—Å—ñ {max_retries} —Å–ø—Ä–æ–±–∏ –æ–±—Ä–æ–±–∏—Ç–∏ {supplier_name} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è.")

async def periodic_update():
    """
    –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å, —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ —Ç—ñ XML-—Ñ–∞–π–ª–∏, —è–∫—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è,
    –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–µ—à—É —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–ø–∏—Ç–∏.
    """
    while True:
        log_to_file("üîÑ [Auto-Update] –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–º—ñ–Ω —É Google Sheets...")

        try:
            supplier_data = spreadsheet.worksheet("Sheet1").get_all_records()
        except gspread.exceptions.APIError as e:
            log_to_file(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ: {e}")
            await asyncio.sleep(UPDATE_INTERVAL)  # –ß–µ–∫–∞—î–º–æ 30 —Ö–≤–∏–ª–∏–Ω
            continue

        updated_suppliers = []
        skipped_suppliers = []
        batch_size = 5  # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ 5 –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª

        for i in range(0, len(supplier_data), batch_size):
            batch = supplier_data[i:i + batch_size]

            for supplier in batch:
                supplier_id = str(supplier["Post_ID"])
                supplier_name = supplier["Supplier Name"]
                sheet_id = supplier["Google Sheet ID"]

                if supplier_id in skipped_suppliers:
                    log_to_file(f"‚ö†Ô∏è {supplier_name}: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, –±–æ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ü–∏–∫–ª—ñ –±—É–ª–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç API.")
                    continue

                try:
                    sheet = client.open_by_key(sheet_id).sheet1
                    await asyncio.sleep(5)  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é API
                    
                    new_hash = get_price_hash(sheet)

                    if supplier_id in price_hash_cache and price_hash_cache[supplier_id] == new_hash:
                        log_to_file(f"‚è≠Ô∏è {supplier_name}: –ù–µ–º–∞—î –∑–º—ñ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
                        continue

                    price_hash_cache[supplier_id] = new_hash  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    create_xml(supplier_id, supplier_name, sheet_id, {"ID": "A", "Name": "B", "Price": "D"})
                    updated_suppliers.append(supplier_name)

                except gspread.exceptions.APIError as e:
                    if "429" in str(e):
                        log_to_file(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è {supplier_name}. –ß–µ–∫–∞—î–º–æ 60 —Å–µ–∫...")
                        await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                        skipped_suppliers.append(supplier_id)  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                    else:
                        log_to_file(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {supplier_name}: {e}")

        log_to_file(f"‚úÖ [Auto-Update] –û–Ω–æ–≤–ª–µ–Ω–æ {len(updated_suppliers)} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤, —á–µ–∫–∞—î–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª...")
        await asyncio.sleep(UPDATE_INTERVAL)  # –ß–µ–∫–∞—î–º–æ 30 —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è


# üîπ API
app = FastAPI()
templates = Jinja2Templates(directory="/app/templates")

@app.get("/output/", response_class=HTMLResponse)
def list_output_files(request: Request):
    """
    –ì–µ–Ω–µ—Ä—É—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ /output/
    """
    try:
        files = os.listdir(XML_DIR)
        files = sorted(files)  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
    except FileNotFoundError:
        files = []
    return templates.TemplateResponse("file_list.html", {"request": request, "files": files})

app.mount("/output/", StaticFiles(directory=os.path.abspath(XML_DIR)), name="output")  
 

@app.get("/XML_prices/google_sheet_to_xml/files")
def list_files():
    return {"files": [f for f in os.listdir(XML_DIR) if f.endswith(".xml")]}

@app.get("/XML_prices/google_sheet_to_xml/download/{filename}")
def download_file(filename: str):
    file_path = os.path.join(XML_DIR, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path, filename=filename)
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@app.delete("/XML_prices/google_sheet_to_xml/delete/{filename}")
def delete_file(filename: str):
    file_path = os.path.join(XML_DIR, filename)
    if os.path.exists(file_path):
        os.remove(file_path)
        return {"status": "success", "message": f"–§–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ."}
    raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@app.delete("/XML_prices/google_sheet_to_xml/delete_all")
def delete_all_files():
    files = os.listdir(XML_DIR)
    for file in files:
        os.remove(os.path.join(XML_DIR, file))
    return {"status": "success", "message": "–í—Å—ñ —Ñ–∞–π–ª–∏ —É –ø–∞–ø—Ü—ñ output –≤–∏–¥–∞–ª–µ–Ω–æ."}

@app.get("/logs/debug", response_class=HTMLResponse)
def view_debug_log():
    if os.path.exists(DEBUG_LOG_FILE):
        return FileResponse(DEBUG_LOG_FILE)
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")



@app.on_event("startup")
async def startup_event():
    asyncio.ensure_future(periodic_update())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è XML




@app.post("/XML_prices/google_sheet_to_xml/generate")
def generate():
    threading.Thread(target=lambda: [
        create_xml(str(supplier["Post_ID"]), supplier["Supplier Name"], supplier["Google Sheet ID"], 
                   {"ID": "A", "Name": "B", "Price": "D"})
        for supplier in spreadsheet.worksheet("Sheet1").get_all_records()
    ]).start()
    return {"status": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è XML –∑–∞–ø—É—â–µ–Ω–∞"}